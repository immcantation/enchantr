// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mutation_count
Rcpp::RObject mutation_count(std::vector<std::string> germs, std::vector<std::string> inputs, int X, bool parallel, bool return_count);
RcppExport SEXP _enchantr_mutation_count(SEXP germsSEXP, SEXP inputsSEXP, SEXP XSEXP, SEXP parallelSEXP, SEXP return_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type germs(germsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< int >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type return_count(return_countSEXP);
    rcpp_result_gen = Rcpp::wrap(mutation_count(germs, inputs, X, parallel, return_count));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_enchantr_mutation_count", (DL_FUNC) &_enchantr_mutation_count, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_enchantr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
